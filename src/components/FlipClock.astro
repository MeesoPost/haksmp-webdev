---
// USER: Vul hier je launch datum in!
// Formaat: 'YYYY-MM-DDTHH:MM:SS+01:00' (Nederlandse tijd)
const LAUNCH_DATE = '2025-12-01T18:00:00+01:00'; // ‚Üê AANPASSEN!
---

<div class="flip-clock">
  <h2 class="flip-clock__title">Seizoen 4 Start Over:</h2>
  
  <div class="flip-clock__cards" id="flip-clock-cards">
    <!-- Dagen -->
    <div class="flip-unit" data-unit="days">
      <div class="upper-card">
        <span class="number" data-current="60">60</span>
        <div class="flip-card">
          <span class="number" data-next="60">60</span>
        </div>
      </div>
      <div class="lower-card">
        <span class="number" data-current="60">60</span>
        <div class="flip-card">
          <span class="number" data-next="60">60</span>
        </div>
      </div>
      <div class="label">DAGEN</div>
    </div>

    <div class="separator">:</div>

    <!-- Uren -->
    <div class="flip-unit" data-unit="hours">
      <div class="upper-card">
        <span class="number" data-current="04">04</span>
        <div class="flip-card">
          <span class="number" data-next="04">04</span>
        </div>
      </div>
      <div class="lower-card">
        <span class="number" data-current="04">04</span>
        <div class="flip-card">
          <span class="number" data-next="04">04</span>
        </div>
      </div>
      <div class="label">UREN</div>
    </div>

    <div class="separator">:</div>

    <!-- Minuten -->
    <div class="flip-unit" data-unit="minutes">
      <div class="upper-card">
        <span class="number" data-current="49">49</span>
        <div class="flip-card">
          <span class="number" data-next="49">49</span>
        </div>
      </div>
      <div class="lower-card">
        <span class="number" data-current="49">49</span>
        <div class="flip-card">
          <span class="number" data-next="49">49</span>
        </div>
      </div>
      <div class="label">MINUTEN</div>
    </div>

    <div class="separator">:</div>

    <!-- Seconden -->
    <div class="flip-unit" data-unit="seconds">
      <div class="upper-card">
        <span class="number" data-current="23">23</span>
        <div class="flip-card">
          <span class="number" data-next="23">23</span>
        </div>
      </div>
      <div class="lower-card">
        <span class="number" data-current="23">23</span>
        <div class="flip-card">
          <span class="number" data-next="23">23</span>
        </div>
      </div>
      <div class="label">SECONDEN</div>
    </div>
  </div>

  <!-- Live status -->
  <div class="flip-clock__live" id="flip-clock-live" style="display: none;">
    <span class="flip-clock__live-indicator">‚óè</span>
    <span class="flip-clock__live-text">üéâ LIVE NOW!</span>
  </div>
</div>

<style>
  .flip-clock {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    padding: var(--space-lg) 0;
  }

  .flip-clock__title {
    font-family: var(--root-font-family--primary);
    font-size: clamp(1.5rem, 4vw, 2.5rem);
    color: var(--root-color--grey);
    text-align: center;
    margin-bottom: var(--space-sm);
    text-shadow: 2px 2px 0 rgba(0,0,0,0.3);
  }

  .flip-clock__cards {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    flex-wrap: wrap;
    justify-content: center;
  }

  .separator {
    font-family: var(--root-font-family--primary);
    font-size: 3rem;
    color: var(--root-color--support);
    font-weight: var(--root-font-weight--bold);
    line-height: 1;
    margin: 0 var(--space-xs);
    align-self: center;
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.4; }
  }

  /* Flip unit container */
  .flip-unit {
    position: relative;
    width: 100px;
    height: 120px;
    margin: 10px;
    text-align: center;
  }

  /* Upper and lower cards */
  .upper-card,
  .lower-card {
    position: absolute;
    width: 100%;
    height: 50%;
    overflow: hidden;
    background: var(--root-color--secondary);
  }

  .upper-card {
    top: 0;
    border-radius: 8px 8px 0 0;
    border: 2px solid var(--root-color--secondary-dark);
    border-bottom-width: 1px;
    background: linear-gradient(to bottom, 
      var(--root-color--secondary), 
      var(--root-color--secondary-dark));
  }

  .lower-card {
    bottom: 0;
    border-radius: 0 0 8px 8px;
    border: 2px solid var(--root-color--secondary-dark);
    border-top-width: 1px;
    background: linear-gradient(to bottom, 
      var(--root-color--secondary-dark), 
      var(--root-color--secondary-darkest));
    box-shadow: 0 3px 6px rgba(0,0,0,0.3);
  }

  /* Numbers - the key to making them fill properly */
  .number {
    position: absolute;
    width: 100%;
    left: 0;
    font-family: var(--root-font-family--primary);
    font-size: 5rem;
    font-weight: var(--root-font-weight--bold);
    color: var(--root-color--white);
    text-align: center;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    line-height: 120px; /* Match total height */
  }

  /* Upper card shows top half of number */
  .upper-card .number {
    top: 0;
  }

  /* Lower card shows bottom half of number */
  .lower-card .number {
    top: -60px; /* Shift up by half height to show bottom portion */
  }

  /* Flip card animations */
  .flip-card {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: var(--root-color--secondary);
    overflow: hidden;
    transform-origin: bottom;
    transform: rotateX(0deg);
    opacity: 0;
  }

  .upper-card .flip-card {
    border-radius: 8px 8px 0 0;
    border: 2px solid var(--root-color--secondary-dark);
    border-bottom-width: 1px;
    background: linear-gradient(to bottom, 
      var(--root-color--secondary), 
      var(--root-color--secondary-dark));
  }

  .lower-card .flip-card {
    border-radius: 0 0 8px 8px;
    border: 2px solid var(--root-color--secondary-dark);
    border-top-width: 1px;
    background: linear-gradient(to bottom, 
      var(--root-color--secondary-dark), 
      var(--root-color--secondary-darkest));
    transform-origin: top;
    transform: rotateX(180deg);
  }

  /* Animation classes */
  .flip-unit.flipping .upper-card .flip-card {
    animation: flipUpperCard 0.6s ease-in-out;
    opacity: 1;
    z-index: 2;
  }

  .flip-unit.flipping .lower-card .flip-card {
    animation: flipLowerCard 0.6s ease-in-out 0.3s;
    opacity: 1;
    z-index: 2;
  }

  @keyframes flipUpperCard {
    0% {
      transform: rotateX(0deg);
    }
    100% {
      transform: rotateX(-180deg);
    }
  }

  @keyframes flipLowerCard {
    0% {
      transform: rotateX(180deg);
    }
    100% {
      transform: rotateX(0deg);
    }
  }

  /* Label */
  .label {
    position: absolute;
    bottom: -25px;
    width: 100%;
    text-align: center;
    font-family: var(--root-font-family--primary);
    font-size: 0.75rem;
    color: var(--root-color--grey);
    text-transform: uppercase;
    letter-spacing: 2px;
    font-weight: var(--root-font-weight--bold);
  }

  /* Live indicator */
  .flip-clock__live {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-md) var(--space-lg);
    background: var(--root-color--secondary);
    color: var(--root-color--white);
    border-radius: 8px;
    font-family: var(--root-font-family--primary);
    font-size: 1.5rem;
    font-weight: var(--root-font-weight--bold);
    animation: pulse-live 1.5s ease-in-out infinite;
  }

  @keyframes pulse-live {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }

  .flip-clock__live-indicator {
    font-size: 2rem;
    color: var(--root-color--support);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .flip-unit {
      width: 70px;
      height: 90px;
    }

    .number {
      font-size: 3.5rem;
      line-height: 90px;
    }

    .lower-card .number {
      top: -45px;
    }

    .separator {
      font-size: 2rem;
    }

    .label {
      font-size: 0.625rem;
    }
  }

  @media (max-width: 480px) {
    .separator {
      display: none;
    }

    .flip-unit {
      width: 60px;
      height: 75px;
      margin: 5px;
    }

    .number {
      font-size: 3rem;
      line-height: 75px;
    }

    .lower-card .number {
      top: -37.5px;
    }
  }
</style>

<script define:vars={{ LAUNCH_DATE }}>
  // Countdown logic
  const targetDate = new Date(LAUNCH_DATE);
  let previousValues = {
    days: -1,
    hours: -1,
    minutes: -1,
    seconds: -1
  };

  function padNumber(num) {
    return num.toString().padStart(2, '0');
  }

  function updateFlipUnit(unit, newValue) {
    const flipUnit = document.querySelector(`[data-unit="${unit}"]`);
    if (!flipUnit) return;

    const formattedValue = padNumber(newValue);
    const oldValue = previousValues[unit] === -1 ? formattedValue : padNumber(previousValues[unit]);
    
    // Only animate if value actually changed
    if (oldValue === formattedValue) return;
    
    // Get all number elements
    const upperCurrent = flipUnit.querySelector('.upper-card .number[data-current]');
    const upperNext = flipUnit.querySelector('.upper-card .flip-card .number[data-next]');
    const lowerCurrent = flipUnit.querySelector('.lower-card .number[data-current]');
    const lowerNext = flipUnit.querySelector('.lower-card .flip-card .number[data-next]');

    // Set the next values
    if (upperNext) upperNext.textContent = formattedValue;
    if (lowerNext) lowerNext.textContent = formattedValue;

    // Start flip animation
    flipUnit.classList.add('flipping');

    // After animation completes, update current values and reset
    setTimeout(() => {
      if (upperCurrent) upperCurrent.textContent = formattedValue;
      if (lowerCurrent) lowerCurrent.textContent = formattedValue;
      flipUnit.classList.remove('flipping');
    }, 600);
  }

  function updateCountdown() {
    const now = new Date();
    const diff = targetDate - now;

    // Check if launch has happened
    if (diff <= 0) {
      const liveElement = document.getElementById('flip-clock-live');
      const cardsElement = document.getElementById('flip-clock-cards');
      
      if (liveElement) liveElement.style.display = 'flex';
      if (cardsElement) cardsElement.style.display = 'none';
      
      return; // Stop countdown
    }

    // Calculate time units
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

    // Update cards only if value changed
    if (days !== previousValues.days) {
      updateFlipUnit('days', days);
      previousValues.days = days;
    }
    if (hours !== previousValues.hours) {
      updateFlipUnit('hours', hours);
      previousValues.hours = hours;
    }
    if (minutes !== previousValues.minutes) {
      updateFlipUnit('minutes', minutes);
      previousValues.minutes = minutes;
    }
    if (seconds !== previousValues.seconds) {
      updateFlipUnit('seconds', seconds);
      previousValues.seconds = seconds;
    }
  }

  // Initial setup
  setTimeout(() => {
    updateCountdown();
  }, 100);

  // Update every second
  setInterval(updateCountdown, 1000);
</script>