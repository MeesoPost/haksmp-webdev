---
const LAUNCH_DATE = '2025-10-20T15:00:00+02:00';
---

<div class="flip-clock">
  <h3 class="flip-clock__title">Seizoen 4 Start Over:</h3>
    
    <div class="flip-clock__cards" id="flip-clock-cards">
    <!-- Dagen -->
    <div class="flip-unit" data-unit="days">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">DAGEN</div>
    </div>

    <div class="separator">:</div>

    <!-- Uren -->
    <div class="flip-unit" data-unit="hours">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">UREN</div>
    </div>

    <div class="separator">:</div>

    <!-- Minuten -->
    <div class="flip-unit" data-unit="minutes">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">MINUTEN</div>
    </div>

    <div class="separator">:</div>

    <!-- Seconden -->
    <div class="flip-unit" data-unit="seconds">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">SECONDEN</div>
    </div>
  </div>  

<style>
  .flip-clock {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    padding: var(--space-lg) 0;
  }

.flip-clock__title {
    font-family: var(--root-font-family--secondary);
    font-size: clamp(1.5rem, 4vw, 2.5rem);
    color: var(--root-color--grey);
    text-align: center;
    margin-bottom: var(--space-sm);
    text-shadow: 2px 2px 0 rgba(0,0,0,0.3);
    will-change: auto;
    contain: layout style paint;
  }

  .flip-clock__cards {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    flex-wrap: wrap;
    justify-content: center;
  }

  .separator {
    font-family: var(--root-font-family--secondary);
    font-size: 3rem;
    color: var(--root-color--support);
    font-weight: var(--root-font-weight--bold);
    line-height: 1;
    margin: 0 var(--space-xs);
    align-self: center;
  }

  /* Flip unit container */
  .flip-unit {
    position: relative;
    width: 100px;
    height: 120px;
    margin: 10px;
    text-align: center;
    background: var(--root-color--secondary);
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.4);
    overflow: hidden;
    will-change: contents;
    contain: layout style paint;
  }

  /* Basis nummer styling */
  .flip-unit .number {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: var(--root-font-family--secondary);
    font-size: 4rem;
    font-weight: var(--root-font-weight--bold);
    color: var(--root-color--white);
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    background: var(--root-color--secondary);
    will-change: transform;
  }

  /* Current nummer - normaal zichtbaar */
  .flip-unit .number.current {
    z-index: 1;
  }

  /* Incoming nummer - start boven het zicht */
  .flip-unit .number.incoming {
    transform: translateY(-100%);
    z-index: 2;
  }

  /* Tijdens animatie */
  .flip-unit.changing .number.current {
    animation: fallDown 0.4s cubic-bezier(0.45, 0, 1, 1) forwards;
  }

  .flip-unit.changing .number.incoming {
    animation: dropDown 0.4s cubic-bezier(0, 0, 0.55, 1) forwards;
  }

  @keyframes fallDown {
    0% {
      transform: translateY(0);
      opacity: 1;
    }
    100% {
      transform: translateY(100%);
      opacity: 0.3;
    }
  }

  @keyframes dropDown {
    0% {
      transform: translateY(-100%);
      opacity: 0.95;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Label positioning */
  .label {
    position: absolute;
    bottom: -25px;
    width: 100%;
    text-align: center;
    font-family: var(--root-font-family--secondary);
    font-size: 0.75rem;
    color: var(--root-color--grey);
    text-transform: uppercase;
    letter-spacing: 2px;
    font-weight: var(--root-font-weight--bold);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .flip-clock__cards {
      gap: var(--space-xs);
    }

    .flip-unit {
      width: 70px;
      height: 85px;
      margin: 8px;
    }

    .flip-unit .number {
      font-size: 2.5rem;
    }

    .separator {
      font-size: 2rem;
      margin: 0 2px;
    }

    .label {
      font-size: 0.625rem;
      bottom: -20px;
    }
  }

  @media (max-width: 480px) {
    .flip-clock__title {
      font-size: clamp(1.2rem, 5vw, 1.8rem);
      margin-bottom: var(--space-xs);
    }

    .flip-clock__cards {
      gap: 2px;
    }

    .separator {
      display: none;
    }

    .flip-unit {
      width: 55px;
      height: 70px;
      margin: 4px;
    }

    .flip-unit .number {
      font-size: 2rem;
    }

    .label {
      font-size: 0.5rem;
      bottom: -18px;
      letter-spacing: 1px;
    }
  }

  /* Extra small screens */
  @media (max-width: 360px) {
    .flip-unit {
      width: 50px;
      height: 65px;
      margin: 2px;
    }

    .flip-unit .number {
      font-size: 1.8rem;
    }

    .label {
      font-size: 0.45rem;
      bottom: -16px;
    }
  }
</style>

<script define:vars={{ LAUNCH_DATE }}>
  const targetDate = new Date(LAUNCH_DATE);
  
  // Cache DOM references
  const flipUnits = {
    days: null,
    hours: null,
    minutes: null,
    seconds: null
  };
  
  let previousValues = {
    days: -1,
    hours: -1,
    minutes: -1,
    seconds: -1
  };
  
  let animationFrameId = null;
  let lastUpdateTime = 0;
  
  function padNumber(num) {
    return num.toString().padStart(2, '0');
  }
  
  function cacheElements() {
    Object.keys(flipUnits).forEach(unit => {
      flipUnits[unit] = document.querySelector(`[data-unit="${unit}"]`);
    });
  }
  
  function updateFlipUnit(unit, newValue, forceUpdate = false) {
    const flipUnit = flipUnits[unit];
    if (!flipUnit) return;
    
    const formattedValue = padNumber(newValue);
    const oldValue = previousValues[unit] === -1 ? formattedValue : padNumber(previousValues[unit]);
    
    const currentNumber = flipUnit.querySelector('.number.current');
    const incomingNumber = flipUnit.querySelector('.number.incoming');
    
    if (!currentNumber || !incomingNumber) return;
    
    // First load or forced update - set directly without animation
    if (forceUpdate || previousValues[unit] === -1) {
      currentNumber.textContent = formattedValue;
      incomingNumber.textContent = formattedValue;
      previousValues[unit] = newValue;
      return;
    }
    
    // Only animate if value actually changed
    if (oldValue === formattedValue) return;
    
    // Remove existing changing class to reset animation
    flipUnit.classList.remove('changing');
    
    // Set new value in incoming
    incomingNumber.textContent = formattedValue;
    
    // Trigger reflow to restart animation
    void flipUnit.offsetHeight;
    
    // Add changing class to start animation
    flipUnit.classList.add('changing');
    
    // After animation completes, swap positions
    const animationTimeout = setTimeout(() => {
      currentNumber.textContent = formattedValue;
      flipUnit.classList.remove('changing');
      previousValues[unit] = newValue;
    }, 400);
  }
  
  function calculateCountdown() {
    const now = new Date();
    const diff = targetDate - now;
    
    let days, hours, minutes, seconds;
    
    if (diff <= 0) {
      days = hours = minutes = seconds = 0;
    } else {
      days = Math.floor(diff / (1000 * 60 * 60 * 24));
      hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      seconds = Math.floor((diff % (1000 * 60)) / 1000);
    }
    
    return { days, hours, minutes, seconds };
  }
  
  function updateCountdown(isFirstRun = false) {
    const { days, hours, minutes, seconds } = calculateCountdown();
    
    if (days !== previousValues.days) {
      updateFlipUnit('days', days, isFirstRun);
    }
    if (hours !== previousValues.hours) {
      updateFlipUnit('hours', hours, isFirstRun);
    }
    if (minutes !== previousValues.minutes) {
      updateFlipUnit('minutes', minutes, isFirstRun);
    }
    if (seconds !== previousValues.seconds) {
      updateFlipUnit('seconds', seconds, isFirstRun);
    }
  }
  
  function tick(currentTime) {
    // Update only once per second (1000ms)
    if (currentTime - lastUpdateTime >= 1000) {
      updateCountdown(false);
      lastUpdateTime = currentTime;
    }
    
    // Continue the animation loop
    animationFrameId = requestAnimationFrame(tick);
  }
  
  function init() {
    cacheElements();
    updateCountdown(true);
    
    // Start animation loop
    animationFrameId = requestAnimationFrame(tick);
  }
  
  // Initialize when ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(init, 100);
    });
  } else {
    setTimeout(init, 100);
  }
  
  // Cleanup on page hide
  window.addEventListener('pagehide', () => {
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
    }
  });
</script>