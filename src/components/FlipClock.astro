---
// USER: Vul hier je launch datum in!
// Formaat: 'YYYY-MM-DDTHH:MM:SS+01:00' (Nederlandse tijd)
const LAUNCH_DATE = '2025-10-20T15:00:00+02:00'; // ‚Üê 20 oktober 2025 launch!
---

<div class="flip-clock">
  <h3 class="flip-clock__title">Seizoen 4 Start Over:</h3>
    
    <div class="flip-clock__cards" id="flip-clock-cards">
    <!-- Dagen -->
    <div class="flip-unit" data-unit="days">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">DAGEN</div>
    </div>

    <div class="separator">:</div>

    <!-- Uren -->
    <div class="flip-unit" data-unit="hours">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">UREN</div>
    </div>

    <div class="separator">:</div>

    <!-- Minuten -->
    <div class="flip-unit" data-unit="minutes">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">MINUTEN</div>
    </div>

    <div class="separator">:</div>

    <!-- Seconden -->
    <div class="flip-unit" data-unit="seconds">
      <div class="number current">--</div>
      <div class="number incoming">--</div>
      <div class="label">SECONDEN</div>
    </div>
  </div>  

<style>
  .flip-clock {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    padding: var(--space-lg) 0;
  }

.flip-clock__title {
    font-family: var(--root-font-family--secondary);
    font-size: clamp(1.5rem, 4vw, 2.5rem);
    color: var(--root-color--grey);
    text-align: center;
    margin-bottom: var(--space-sm);
    text-shadow: 2px 2px 0 rgba(0,0,0,0.3);
    will-change: auto;
    contain: layout style paint;
  }

  .flip-clock__cards {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    flex-wrap: wrap;
    justify-content: center;
  }

  .separator {
    font-family: var(--root-font-family--secondary);
    font-size: 3rem;
    color: var(--root-color--support);
    font-weight: var(--root-font-weight--bold);
    line-height: 1;
    margin: 0 var(--space-xs);
    align-self: center;
  }

  /* Flip unit container - simplified */
  .flip-unit {
    position: relative;
    width: 100px;
    height: 120px;
    margin: 10px;
    text-align: center;
    background: var(--root-color--secondary);
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.4);
    overflow: hidden;
  }

  /* Basis nummer styling */
  .flip-unit .number {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: var(--root-font-family--secondary);
    font-size: 4rem;
    font-weight: var(--root-font-weight--bold);
    color: var(--root-color--white);
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    background: var(--root-color--secondary);
  }

  /* Current nummer - normaal zichtbaar */
  .flip-unit .number.current {
    z-index: 1;
  }

  /* Incoming nummer - start boven het zicht */
  .flip-unit .number.incoming {
    transform: translateY(-100%);
    z-index: 2;
  }

  /* Tijdens animatie */
  .flip-unit.changing .number.current {
    /* Huidige nummer valt naar beneden */
    animation: fallDown 0.4s ease-in forwards;
  }

  .flip-unit.changing .number.incoming {
    /* Nieuwe nummer komt van boven */
    animation: dropDown 0.4s ease-out forwards;
  }

  @keyframes fallDown {
    0% {
      transform: translateY(0);
      opacity: 1;
    }
    100% {
      transform: translateY(100%);
      opacity: 0.3;
    }
  }

  @keyframes dropDown {
    0% {
      transform: translateY(-100%);
      opacity: 0.95;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Label positioning */

  /* Label */
  .label {
    position: absolute;
    bottom: -25px;
    width: 100%;
    text-align: center;
    font-family: var(--root-font-family--secondary);
    font-size: 0.75rem;
    color: var(--root-color--grey);
    text-transform: uppercase;
    letter-spacing: 2px;
    font-weight: var(--root-font-weight--bold);
  }

  /* Live indicator */
  .flip-clock__live {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-md) var(--space-lg);
    background: var(--root-color--secondary);
    color: var(--root-color--white);
    border-radius: 8px;
    font-family: var(--root-font-family--secondary);
    font-size: 1.5rem;
    font-weight: var(--root-font-weight--bold);
    animation: pulse-live 1.5s ease-in-out infinite;
  }

  @keyframes pulse-live {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }

  .flip-clock__live-indicator {
    font-size: 2rem;
    color: var(--root-color--support);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .flip-clock__cards {
      gap: var(--space-xs);
    }

    .flip-unit {
      width: 70px;
      height: 85px;
      margin: 8px;
    }

    .flip-unit .number {
      font-size: 2.5rem;
    }

    .separator {
      font-size: 2rem;
      margin: 0 2px;
    }

    .label {
      font-size: 0.625rem;
      bottom: -20px;
    }
  }

  @media (max-width: 480px) {
    .flip-clock__title {
      font-size: clamp(1.2rem, 5vw, 1.8rem);
      margin-bottom: var(--space-xs);
    }

    .flip-clock__cards {
      gap: 2px;
    }

    .separator {
      display: none;
    }

    .flip-unit {
      width: 55px;
      height: 70px;
      margin: 4px;
    }

    .flip-unit .number {
      font-size: 2rem;
    }

    .label {
      font-size: 0.5rem;
      bottom: -18px;
      letter-spacing: 1px;
    }
  }

  /* Extra small screens */
  @media (max-width: 360px) {
    .flip-unit {
      width: 50px;
      height: 65px;
      margin: 2px;
    }

    .flip-unit .number {
      font-size: 1.8rem;
    }

    .label {
      font-size: 0.45rem;
      bottom: -16px;
    }
  }
</style>

<script define:vars={{ LAUNCH_DATE }}>
  // Countdown logic
  const targetDate = new Date(LAUNCH_DATE);
  let previousValues = {
    days: -1,
    hours: -1,
    minutes: -1,
    seconds: -1
  };

  function padNumber(num) {
    return num.toString().padStart(2, '0');
  }

  function updateFlipUnit(unit, newValue, forceUpdate = false) {
    const flipUnit = document.querySelector(`[data-unit="${unit}"]`);
    if (!flipUnit) return;

    const formattedValue = padNumber(newValue);
    const oldValue = previousValues[unit] === -1 ? formattedValue : padNumber(previousValues[unit]);
    
    const currentNumber = flipUnit.querySelector('.number.current');
    const incomingNumber = flipUnit.querySelector('.number.incoming');
    
    if (!currentNumber || !incomingNumber) return;

    // Voor eerste keer laden of geforceerde update - zet direct zonder animatie
    if (forceUpdate || previousValues[unit] === -1) {
      currentNumber.textContent = formattedValue;
      incomingNumber.textContent = formattedValue;
      return;
    }

    // Only animate if value actually changed
    if (oldValue === formattedValue) return;

    // Zet nieuwe waarde in incoming nummer
    incomingNumber.textContent = formattedValue;

    // Start dual animatie
    flipUnit.classList.add('changing');

    // Na animatie: wissel de rollen
    setTimeout(() => {
      // Current krijgt nieuwe waarde (voor volgende keer)
      currentNumber.textContent = formattedValue;
      
      // Stop animatie (reset positions)
      flipUnit.classList.remove('changing');
    }, 600);
  }

  function updateCountdown() {
    const now = new Date();
    const diff = targetDate - now;

    // Calculate time units - zelfs als negatief, toon 00:00:00:00
    let days, hours, minutes, seconds;
    
    if (diff <= 0) {
      // Als de datum is bereikt, toon gewoon nullen
      days = 0;
      hours = 0;
      minutes = 0;
      seconds = 0;
    } else {
      // Normale countdown berekening
      days = Math.floor(diff / (1000 * 60 * 60 * 24));
      hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      seconds = Math.floor((diff % (1000 * 60)) / 1000);
    }

    // Update cards - eerste keer of als waarde veranderd
    const isFirstRun = previousValues.days === -1;
    
    if (days !== previousValues.days || isFirstRun) {
      updateFlipUnit('days', days, isFirstRun);
      previousValues.days = days;
    }
    if (hours !== previousValues.hours || isFirstRun) {
      updateFlipUnit('hours', hours, isFirstRun);
      previousValues.hours = hours;
    }
    if (minutes !== previousValues.minutes || isFirstRun) {
      updateFlipUnit('minutes', minutes, isFirstRun);
      previousValues.minutes = minutes;
    }
    if (seconds !== previousValues.seconds || isFirstRun) {
      updateFlipUnit('seconds', seconds, isFirstRun);
      previousValues.seconds = seconds;
    }
  }

  // Initial setup
  setTimeout(() => {
    updateCountdown();
  }, 100);

  // Update every second
  setInterval(updateCountdown, 1000);
</script>