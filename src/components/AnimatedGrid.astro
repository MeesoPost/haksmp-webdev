---
// AnimatedGrid.astro - Creates a Tron-like animated grid where lines draw themselves
---

<div class="tron-grid" id="tron-grid"></div>

<style>
  .tron-grid {
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: 0;
    overflow: hidden;
  }

  .grid-line {
    position: absolute;
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .grid-line.animate {
      animation: none !important;
      width: 100% !important;
      height: 100% !important;
      opacity: 0.3 !important;
    }
  }
</style>

<script>
  function initTronGrid() {
    console.log('Initializing Tron Grid...');
    const container = document.getElementById('tron-grid');
    if (!container) {
      console.error('Tron grid container not found');
      return;
    }

    const gridSize = 12; // Size of each grid cell - smaller boxes
    const lineDelay = 1; // Delay between line animations in ms - faster animation
    
    // Clear any existing content
    container.innerHTML = '';
    
    // Get container dimensions
    const rect = container.getBoundingClientRect();
    const width = rect.width;
    const height = rect.height;
    
    console.log(`Container dimensions: ${width}x${height}`);
    
    if (width === 0 || height === 0) {
      console.warn('Container has no dimensions, retrying...');
      setTimeout(initTronGrid, 100);
      return;
    }
    
    const lines = [];
    
    // Create horizontal lines
    for (let y = 0; y <= height; y += gridSize) {
      const line = document.createElement('div');
      line.className = 'grid-line horizontal';
      line.style.position = 'absolute';
      line.style.top = y + 'px';
      line.style.left = '0px';
      line.style.width = '0px';
      line.style.height = '1px';
      line.style.backgroundColor = 'rgba(255, 255, 255, 0.06)';
      line.style.boxShadow = '0 0 0.5px rgba(255, 255, 255, 0.1)';
      container.appendChild(line);
      lines.push({ element: line, type: 'horizontal' });
    }
    
    // Create vertical lines
    for (let x = 0; x <= width; x += gridSize) {
      const line = document.createElement('div');
      line.className = 'grid-line vertical';
      line.style.position = 'absolute';
      line.style.left = x + 'px';
      line.style.top = '0px';
      line.style.width = '1px';
      line.style.height = '0px';
      line.style.backgroundColor = 'rgba(255, 255, 255, 0.06)';
      line.style.boxShadow = '0 0 0.5px rgba(255, 255, 255, 0.1)';
      container.appendChild(line);
      lines.push({ element: line, type: 'vertical' });
    }
    
    console.log(`Created ${lines.length} lines`);
    
    // Shuffle lines for more interesting animation pattern
    for (let i = lines.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [lines[i], lines[j]] = [lines[j], lines[i]];
    }
    
    // Animate lines with staggered timing
    lines.forEach((line, index) => {
      const delay = index * lineDelay + (line.type === 'vertical' ? 600 : 0);
      setTimeout(() => {
        if (line.type === 'horizontal') {
          line.element.style.transition = 'width 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          line.element.style.width = width + 'px';
        } else {
          line.element.style.transition = 'height 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          line.element.style.height = height + 'px';
        }
        
        // Keep the same color after animation - no fading
        // Lines maintain their brightness throughout
      }, delay);
    });
  } 

  // Initialize when DOM is loaded and page is visible
  function startGrid() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => setTimeout(initTronGrid, 800));
    } else {
      setTimeout(initTronGrid, 800);
    }
  }

  // Start the grid
  startGrid();

  // Reinitialize on window resize
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(initTronGrid, 200);
  });
</script>